#!/usr/bin/env node
/**
 * Final Model Configuration Test
 * Tests that the bot now uses GPT-5 by default
 */

require('dotenv').config();

async function testFinalConfiguration() {
  try {
    console.log('üéØ Testing Final GPT-5 Configuration\n');
    
    const { serviceManager } = require('./src/core/service-manager');
    
    console.log('üìã Configuration Check:');
    console.log(`  Environment OPENAI_MODEL: ${process.env.OPENAI_MODEL}`);
    console.log(`  ServiceManager default: ${serviceManager.config.openai.model}`);
    console.log('');
    
    // Test creating a summary service
    const SummaryService = require('./src/services/summary.service');
    const summaryService = new SummaryService(serviceManager, {});
    
    console.log(`  Summary Service model: ${summaryService.config.model}`);
    console.log('');
    
    // Test a simple summary generation
    const testTranscript = "This video explains artificial intelligence concepts including machine learning, neural networks, and their applications in modern technology.";
    const testVideoId = 'config-test-' + Date.now();
    
    console.log('üß™ Testing Summary Generation:');
    console.log(`Using: ${summaryService.config.model}`);
    
    const customPrompt = `Create a brief summary of this content. At the very end, add exactly: "Generated by: ${summaryService.config.model}"`;
    
    const startTime = Date.now();
    
    try {
      const summary = await summaryService.generateSummary(testTranscript, testVideoId, 'AI Concepts Test', customPrompt);
      const responseTime = Date.now() - startTime;
      
      console.log(`‚úÖ Generated in ${responseTime}ms`);
      console.log('\nüìù Result:');
      console.log(summary);
      
      // Verify the model in the response
      const modelMatch = summary.match(/Generated by: (.+)/i);
      if (modelMatch) {
        const actualModel = modelMatch[1].trim();
        console.log('\nüîç Verification:');
        console.log(`  Expected: ${summaryService.config.model}`);
        console.log(`  Actual: ${actualModel}`);
        console.log(`  ‚úÖ Success: ${actualModel === summaryService.config.model ? 'YES' : 'NO'}`);
      }
      
    } catch (error) {
      console.log(`‚ùå Summary generation failed: ${error.message}`);
    }
    
    console.log('\nüéâ Configuration test complete!');
    
  } catch (error) {
    console.error('‚ùå Test failed:', error);
  }
}

testFinalConfiguration();
